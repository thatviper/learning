// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: employees.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeManagementClient is the client API for EmployeeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeManagementClient interface {
	CreateDepartment(ctx context.Context, in *NewDepartment, opts ...grpc.CallOption) (*Department, error)
	CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	GetEmployeeById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Employee, error)
	GetDepartmentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Department, error)
	GetAllEmployees(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (EmployeeManagement_GetAllEmployeesClient, error)
	GetAllDepartments(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*AllDepartments, error)
	UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error)
	DeleteEmployeeById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Employee, error)
}

type employeeManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeManagementClient(cc grpc.ClientConnInterface) EmployeeManagementClient {
	return &employeeManagementClient{cc}
}

func (c *employeeManagementClient) CreateDepartment(ctx context.Context, in *NewDepartment, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) GetEmployeeById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) GetDepartmentById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/GetDepartmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) GetAllEmployees(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (EmployeeManagement_GetAllEmployeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeManagement_ServiceDesc.Streams[0], "/pb.EmployeeManagement/GetAllEmployees", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeManagementGetAllEmployeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeManagement_GetAllEmployeesClient interface {
	Recv() (*Employee, error)
	grpc.ClientStream
}

type employeeManagementGetAllEmployeesClient struct {
	grpc.ClientStream
}

func (x *employeeManagementGetAllEmployeesClient) Recv() (*Employee, error) {
	m := new(Employee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeManagementClient) GetAllDepartments(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*AllDepartments, error) {
	out := new(AllDepartments)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/GetAllDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) DeleteEmployeeById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/pb.EmployeeManagement/DeleteEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeManagementServer is the server API for EmployeeManagement service.
// All implementations must embed UnimplementedEmployeeManagementServer
// for forward compatibility
type EmployeeManagementServer interface {
	CreateDepartment(context.Context, *NewDepartment) (*Department, error)
	CreateEmployee(context.Context, *Employee) (*Employee, error)
	GetEmployeeById(context.Context, *Id) (*Employee, error)
	GetDepartmentById(context.Context, *Id) (*Department, error)
	GetAllEmployees(*EmptyParams, EmployeeManagement_GetAllEmployeesServer) error
	GetAllDepartments(context.Context, *EmptyParams) (*AllDepartments, error)
	UpdateEmployee(context.Context, *Employee) (*Employee, error)
	DeleteEmployeeById(context.Context, *Id) (*Employee, error)
	mustEmbedUnimplementedEmployeeManagementServer()
}

// UnimplementedEmployeeManagementServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeManagementServer struct {
}

func (UnimplementedEmployeeManagementServer) CreateDepartment(context.Context, *NewDepartment) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedEmployeeManagementServer) CreateEmployee(context.Context, *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) GetEmployeeById(context.Context, *Id) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (UnimplementedEmployeeManagementServer) GetDepartmentById(context.Context, *Id) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (UnimplementedEmployeeManagementServer) GetAllEmployees(*EmptyParams, EmployeeManagement_GetAllEmployeesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllEmployees not implemented")
}
func (UnimplementedEmployeeManagementServer) GetAllDepartments(context.Context, *EmptyParams) (*AllDepartments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDepartments not implemented")
}
func (UnimplementedEmployeeManagementServer) UpdateEmployee(context.Context, *Employee) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) DeleteEmployeeById(context.Context, *Id) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeeById not implemented")
}
func (UnimplementedEmployeeManagementServer) mustEmbedUnimplementedEmployeeManagementServer() {}

// UnsafeEmployeeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeManagementServer will
// result in compilation errors.
type UnsafeEmployeeManagementServer interface {
	mustEmbedUnimplementedEmployeeManagementServer()
}

func RegisterEmployeeManagementServer(s grpc.ServiceRegistrar, srv EmployeeManagementServer) {
	s.RegisterService(&EmployeeManagement_ServiceDesc, srv)
}

func _EmployeeManagement_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDepartment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).CreateDepartment(ctx, req.(*NewDepartment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).CreateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).GetEmployeeById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/GetDepartmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).GetDepartmentById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_GetAllEmployees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeManagementServer).GetAllEmployees(m, &employeeManagementGetAllEmployeesServer{stream})
}

type EmployeeManagement_GetAllEmployeesServer interface {
	Send(*Employee) error
	grpc.ServerStream
}

type employeeManagementGetAllEmployeesServer struct {
	grpc.ServerStream
}

func (x *employeeManagementGetAllEmployeesServer) Send(m *Employee) error {
	return x.ServerStream.SendMsg(m)
}

func _EmployeeManagement_GetAllDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).GetAllDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/GetAllDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).GetAllDepartments(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).UpdateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_DeleteEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).DeleteEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EmployeeManagement/DeleteEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).DeleteEmployeeById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeManagement_ServiceDesc is the grpc.ServiceDesc for EmployeeManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EmployeeManagement",
	HandlerType: (*EmployeeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _EmployeeManagement_CreateDepartment_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _EmployeeManagement_CreateEmployee_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _EmployeeManagement_GetEmployeeById_Handler,
		},
		{
			MethodName: "GetDepartmentById",
			Handler:    _EmployeeManagement_GetDepartmentById_Handler,
		},
		{
			MethodName: "GetAllDepartments",
			Handler:    _EmployeeManagement_GetAllDepartments_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _EmployeeManagement_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployeeById",
			Handler:    _EmployeeManagement_DeleteEmployeeById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllEmployees",
			Handler:       _EmployeeManagement_GetAllEmployees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "employees.proto",
}
